# Namespaces in C
One of the critisiscm often made to C is that it doesn't support namespaces and modules, forcing programmers to use weird prefixes before the name of their functions and variables. But what if I told you that, the following code is valid C:
```
#include <io.h>

int
main()
{
	io.println("Hello, world!");
}
```
C programmers are probably asking themselves what the hell is that heresy. The answer is simple, to C concepts structs and function pointer, here is the content of io.h - without include guards -:
```
struct io_module {
	void (*println)(char *);
};
extern struct io_module io;
```
We can see that io is, in fact, a struct containing a pointer to the actual function, allowing to access it the usual dot operators.

The implementation is in io.c:
```
#include <stdio.h>

#include "io.h"

void println(char *s);

struct io_module io = {
	println
};

void
println(char *s)
{
	puts(s);
}
```
A problem of this technic is that you have define the type of your function twice, once in the module declarartion and one in the actual declaration of the function, but the header could easily generated by a small script. The main problem, is performance, it main not be issue in small programs but, if the compiler doesn't know that the function won't change, it won't be able to just use the name in the function in the generated code. It will have to access memory once to get the address on the function before being able to call it.
=> https://hg.sr.ht/~ayb/lab/browse/modules source code